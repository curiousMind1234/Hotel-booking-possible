Approach : 
1. Create event points for every interval start, and end. 
2. Sort it according to the day. 
3. Now, iterate over them one by one. 
If you encounter a start, then the number of active guests increase by one. If you encounter an end, the number of active guests decrease by one. 
4. If at any point, the number of active guests exceed K, we know that scheduling is not possible return false.

bool Solution::hotel(vector<int> &arrive, vector<int> &depart, int K) {
    vector<pair<int,char>> res;

    for(int i = 0; i<arrive.size();i++)
    {
        res.push_back(make_pair(arrive[i],'a'));
        res.push_back(make_pair(depart[i],'d'));
    }
    sort(res.begin(),res.end());
    int curr_active = 0 ,max_active = 0;
    for(int i = 0; i < res.size();i++)
    {
        if(res[i].second == 'a'){
            curr_active++;
            max_active = max(curr_active,max_active);
        }
        else
            curr_active--;           
    }
    return K >= max_active;
}


    //using priority_queue //
    /* 
    int n = a.size();
    vector<pair<int,int>>arr;
    for(int i = 0;i < n;i++){
        arr.push_back({a[i],d[i]});
    }
    sort(arr.begin(),arr.end());
    //store departure time     
    priority_queue<int,vector<int>,greater<int>>pq;
    for(int i = 0;i < n;i++){
        if(pq.size() < K)pq.push(arr[i].second);

        //check in, if rooms are available
        //if rooms are filled, check if some one has already checked out
        else if(arr[i].first > pq.top()){
            pq.pop();
            pq.push(arr[i].second);
        }
        else{
            return false;
        }
    }
    return true;*/
